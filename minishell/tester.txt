# TESTING

- [ ] Display a **prompt** when waiting for a new command.
- [ ] Have a working **history**.
- [ ] Search and launch the right executable (based on the PATH variable or using a relative or an absolute path).
  - [ ] should not have memory leaks
  - [ ] should update exit status
- [ ] Not use more than **one global variable**. Think about it. You will have to explain its purpose.
- [ ] Not interpret unclosed quotes or special characters which are not required by the subject such as \ (backslash) or ; (semicolon).
- [ ] Handle â€™ (single quote) which should prevent the shell from interpreting the meta-characters in the quoted sequence.
- [ ] Handle " (double quote) which should prevent the shell from interpreting the meta-characters in the quoted sequence except for $ (dollar sign).
- [ ] Implement **redirections**:
  - [ ] < should redirect input.
  - [ ] > should redirect output.
  - [ ] << should be given a delimiter, then read the input until a line containing the delimiter is seen. However, it doesn't have to update the history!
  - [ ] >> should redirect output in append mode.
  - [ ] should not have memory leaks
  - [ ] should update exit status
- [ ] Implement **pipes** (| character). The output of each command in the pipeline is connected to the input of the next command via a pipe.
  - [ ] should not have memory leaks
  - [ ] should update exit status
- [ ] Handle **environment variables** ($ followed by a sequence of characters) which should expand to their values.
  - [ ] should not have memory leaks
  - [ ] should update exit status
- [ ] Handle $? which should expand to the exit status of the most recently executed foreground pipeline.
  - [ ] should not have memory leaks
  - [ ] should update exit status
- [ ] Handle ctrl-C, ctrl-D and ctrl-\ which should behave like in bash.
- [ ] In interactive mode:
  - [ ] ctrl-C displays a new prompt on a new line.
  - [ ] ctrl-D exits the shell.
    - [ ] should not have memory leaks
  - [ ] ctrl-\ does nothing.
- [ ] Your shell must implement the following **builtins**:
  - [ ] echo with option -n
    - [ ] should not have memory leaks
    - [ ] should update exit status
  - [ ] cd with only a relative or absolute path
    - [ ] should not have memory leaks
    - [ ] should update exit status
  - [ ] pwd with no options
    - [ ] should not have memory leaks
    - [ ] should update exit status
  - [ ] export with no options
    - [ ] should not have memory leaks
    - [ ] should update exit status
  - [ ] unset with no options
    - [ ] should not have memory leaks
    - [ ] should update exit status
  - [ ] env with no options or arguments
    - [ ] should not have memory leaks
    - [ ] should update exit status
  - [ ] exit with no options
    - [ ] should not have memory leaks
- [ ] norminette

# CMDs

- [ ] Redirections
  - [ ] cat >
  - [ ] cat < >
  - [ ] cat < <
  - [ ] cat > >
  - [ ] echo bonjour > > file
  - [ ] echo bonjour >>> file
  - [ ] cat < file # with non-existent test file
  - [ ] wc -l << stop > file
  - [ ] echo test > file test1
  - [ ] not_cmd bonjour > file
  - [ ] echo 2 >> out1 > out2
  - [ ] echo 2 > out1 >> out2
  - [ ] echo bonjour > $test # with test not defined
  - [ ] > file echo coucou
  - [ ] > out1 ls > out2 < Makefile
  - [ ] echo > file Hello World!
  - [ ] > file echo Hello World!
  - [ ] cat < Makefile | grep cc > file
  - [ ] ls > file | wc -l
  - [ ] cat << $HOME
  - [ ] cat << 1 << 2
  - [ ] cat << 1 | cat << 2
- [ ] Pipes
  - [ ] |
  - [ ] echo |
  - [ ] | echo
  - [ ] echo some_thing here | | and_here
  - [ ] echo bonjour |
  - [ ] echo bonjour | |
  - [ ] sort | ls # check output order
  - [ ] exit 0 | exit 1
  - [ ] exit 1 | exit 0
  - [ ] echo coucou | ;
  - [ ] sleep 5 | exit
  - [ ] cat | cat | cat | ls # check outputs order
  - [ ] cat /dev/random | head -n 1 | cat -e
- [ ] Environment
  - [ ] env
  - [ ] export
  - [ ] export c="at -n"
  - [ ] c$c -e
  - [ ] export var ="cat Makefile | grep >"
  - [ ] export var (then) export var=test
  - [ ] export "" (then) unset ""
  - [ ] export LOL=lala ROR=rara
  - [ ] unset LOL ROR
  - [ ] export "HI= hi"
  - [ ] export "HI =hi"
  - [ ] c$var Makefile # with var=at
  - [ ] echo $bla # with bla not defined
  - [ ] echo $USER$PWD
  - [ ] echo $LESS$VAR
  - [ ] echo $
  - [ ] echo "$HOME"
  - [ ] echo '$HOME'
  - [ ] echo $HOME
  - [ ] echo $'HOME'
  - [ ] echo $2HOME
  - [ ] echo $245HOME
- [ ] $?
  - [ ] echo $?
  - [ ] cat no_file # check exit code
  - [ ] cat Makefile | grep pr | head -n 5 | cd test (mybin) # check status code
  - [ ] cat Makefile | grep pr | head -n 5 | cat test (bin) # check status code
  - [ ] cat Makefile | grep pr | head -n 5 | hello (NA) # check status code
- [ ] echo
  - [ ] echo -n -n -nnnn -nnnnm
  - [ ] echo "bip | bip ; coyotte > < " "
  - [ ] echo
  - [ ] echo simple
  - [ ] echo -n simple
  - [ ] echo ''
  - [ ] echo ""
  - [ ] echo "\n \n \n"
  - [ ] echo ;;
  - [ ] echo hi";" hihi
  - [ ] echo hi " ; " hihi
- [ ] cd
  - [ ] cd $HOME/Documents
  - [ ] cd
  - [ ] cd .
  - [ ] cd ~
  - [ ] cd /
  - [ ] cd no_file
  - [ ] cd a b c d
  - [ ] cd ../../../../../.. ; pwd
- [ ] pwd
  - [ ] pwd a
  - [ ] pwd a b c d
- [ ] exit
  - [ ] exit a
  - [ ] exit 1 2
  - [ ] "exit retour a la ligne"
  - [ ] exit -10
  - [ ] exit +10
  - [ ] exit # should return the last exit code value
  
- [ ] ""ls -l""
- [ ] file_name_in_current_dir
- [ ] not_cmd
- [ ] ~~minishell # binary not in path without "./" before~~
- [ ] /bin/ls
- [ ] /bin/echo bonjour
- [ ] # write something then press ctrl+c
- [ ] # write something then press ctrl+d
- [ ] # write something then press ctrl+\
- [ ] l^Ds
- [ ] echo "cat lol.c | cat > lol.c"
- [ ] echo 'cat lol.c | cat > lol.c'
- [ ] ls > a | wc -l